<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>Bootstrap, from Twitter</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <!-- Le styles -->
    <link href="./bootstrap/css/bootstrap.css" rel="stylesheet">
    <style type="text/css">
        body
        {
            padding-top    : 60px;
            padding-bottom : 40px;
        }
    </style>
    <link href="./bootstrap/css/bootstrap-responsive.css" rel="stylesheet">

    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- Le fav and touch icons -->
    <link rel="shortcut icon" href="./bootstrap/ico/favicon.ico">
    <link rel="apple-touch-icon-precomposed" sizes="144x144"
          href="./bootstrap/ico/apple-touch-icon-144-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="114x114"
          href="./bootstrap/ico/apple-touch-icon-114-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="./bootstrap/ico/apple-touch-icon-72-precomposed.png">
    <link rel="apple-touch-icon-precomposed" href="./bootstrap/ico/apple-touch-icon-57-precomposed.png">

<body>

<div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container">
            <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </a>
            <a class="brand" href="#">Magic The Gathering</a>

            <div class="nav-collapse">
                <ul class="nav">
                    <li class="active"><a href="#">Home</a></li>
                    <li><a href="cards.htm">Cards</a></li>
                    <li><a href="#contact">Contact</a></li>
                </ul>
            </div>
            <!--/.nav-collapse -->
        </div>
    </div>
</div>

<div class="container">

    <!-- Main hero unit for a primary marketing message or call to action -->
    <div class="hero-unit">
        <div id="placeholder1"></div>
    </div>

    <!-- Example row of columns -->
    <div class="row">
        <div class="span4">
            <h2>Converted Mana Cost</h2>

            <p># of cards in set with a converted mana cost of...</p>

            <div id="placeholder2"></div>
        </div>
        <div class="span4">
            <h2>Converted Mana Cost</h2>

            <p>Converted mana costs of individual cards</p>

            <div id="placeholder3"></div>
        </div>
        <div class="span4">
            <h2>Heading</h2>

            <p>Donec sed odio dui. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Vestibulum id ligula
                porta felis euismod semper. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut
                fermentum massa justo sit amet risus.</p>

            <p><a class="btn" href="#">View details »</a></p>
        </div>
    </div>

    <hr>

    <footer>
        <p>© Company 2012</p>
    </footer>

</div>
<!-- /container -->

<!-- Le javascript
================================================== -->
<!-- Placed at the end of the document so the pages load faster -->
<script src="./bootstrap/js/jquery-1.7.2.min.js"></script>
<script src="./bootstrap/js/bootstrap-transition.js"></script>
<script src="./bootstrap/js/bootstrap-alert.js"></script>
<script src="./bootstrap/js/bootstrap-modal.js"></script>
<script src="./bootstrap/js/bootstrap-dropdown.js"></script>
<script src="./bootstrap/js/bootstrap-scrollspy.js"></script>
<script src="./bootstrap/js/bootstrap-tab.js"></script>
<script src="./bootstrap/js/bootstrap-tooltip.js"></script>
<script src="./bootstrap/js/bootstrap-popover.js"></script>
<script src="./bootstrap/js/bootstrap-button.js"></script>
<script src="./bootstrap/js/bootstrap-collapse.js"></script>
<script src="./bootstrap/js/bootstrap-carousel.js"></script>
<script src="./bootstrap/js/bootstrap-typeahead.js"></script>
<script src="./bootstrap/js/d3.v2.min.js"></script>
<style type="text/css">
    .chart div
    {
        font             : 10px sans-serif;
        background-color : steelblue;
        text-align       : right;
        padding          : 3px;
        margin           : 1px;
        color            : white;
    }

    .chart rect
    {
        fill : steelblue;
        /*stroke: white;*/
    }

    rect.a
    {
        fill : grey;
    }

    rect.b
    {
        fill : green;
    }

    rect.c
    {
        fill : white;
    }

    rect.d
    {
        fill : blue;
    }

    rect.e
    {
        fill : red;
    }

    rect.f
    {
        fill : black;
    }
</style>
<script type="text/javascript">
function displayConvertedManaDistribution(parentElement, data)
{
    var width = $(parentElement).empty().width();
    var height = 250;

    var histogram = d3.layout.histogram()(data);

    var x = d3.scale.ordinal()
            .domain(histogram.map(function(d)
                                  {
                                      return d.x;
                                  }))
            .rangeRoundBands([0, width]);

    var y = d3.scale.linear()
            .domain([0, d3.max(histogram.map(function(d)
                                             {
                                                 return d.y;
                                             }))])
            .range([0, height]);

    var svg = d3.select(parentElement).append("svg")
            .attr("width", width)
            .attr("height", height);

    svg.selectAll("rect")
            .data(histogram)
            .enter().append("rect")
            .attr("width", x.rangeBand())
            .attr("x", function(d)
                  {
                      return x(d.x);
                  })
            .attr("y", function(d)
                  {
                      return height - y(d.y);
                  })
            .attr("height", function(d)
                  {
                      return y(d.y);
                  });
}
;

function displayChart(parentElement, data)
{
    var w = $(parentElement).empty().width() / data.length;
    var h = 250;

    var x = d3.scale.linear()
            .domain([0, 1])
            .range([0, w]);

    var y = d3.scale.linear()
            .domain([0, d3.max(data)])
            .rangeRound([0, h]);

    var chart = d3.select(parentElement).append("svg")
            .attr("class", "chart")
            .attr("width", w * data.length - 1)
            .attr("height", h);

    chart.selectAll("rect")
            .data(data)
            .enter().append("rect")
            .attr("x", function(d, i)
                  {
                      return x(i) - .5;
                  })
            .attr("y", function(d)
                  {
                      return h - y(d) - .5;
                  })
            .attr("width", w)
            .attr("height", function(d)
                  {
                      return y(d);
                  });

    chart.append("line")
            .attr("x1", 0)
            .attr("x2", w * data.length)
            .attr("y1", h - .5)
            .attr("y2", h - .5);
}
;

function displayStackedChart(parentElement, inputData)
{
    var n = 6, // number of layers
            m = inputData.length, // number of samples per layer
    // d = stream_layers(n, m, .1),
            data = d3.layout.stack()(inputData),
    //data = d3.layout.stack()(d),
            color = d3.interpolateRgb("#aad", "#556");

    // console.log(d);
    console.log(inputData);

    var margin = 20,
            width = $(parentElement).empty().width(),
            height = 250 - .5 - margin,
            mx = m,
            my = d3.max(data, function(d)
            {
                return d3.max(d, function(d)
                {
                    return d.y0 + d.y;
                });
            }),
            mz = d3.max(data, function(d)
            {
                return d3.max(d, function(d)
                {
                    return d.y;
                });
            }),
            x = function(d)
            {
                return d.x * width / mx;
            },
            y0 = function(d)
            {
                return height - d.y0 * height / my;
            },
            y1 = function(d)
            {
                return height - (d.y + d.y0) * height / my;
            },
            y2 = function(d)
            {
                return d.y * height / mz;
            }; // or `my` to not rescale

    var vis = d3.select(parentElement)
            .append("svg")
            .attr("width", width)
            .attr("height", height + margin);

    var layers = vis.selectAll("g.layer")
            .data(data)
            .enter().append("g")
            .style("fill", function(d, i)
                   {
                       return color(i / (n - 1));
                   })
            .attr("class", "layer");

    var bars = layers.selectAll("g.bar")
            .data(function(d)
                  {
                      return d;
                  })
            .enter().append("g")
            .attr("class", "bar")
    // .attr("transform", function(d) { return "translate(" + x(d) + ",0)"; });

    bars.append("rect")
            .attr("width", x({x:.9}))
        //.attr("x", 0)
        //.attr("y", height)
        //.attr("height", 0)
        // .transition()
        // .delay(function(d, i) { return i * 10; })
            .attr("y", y1)
            .attr("height", function(d)
                  {
                      return y0(d) - y1(d);
                  });

    // var labels = vis.selectAll("text.label")
    //     .data(data[0])
    //     .enter().append("text")
    //     .attr("class", "label")
    //     .attr("x", x)
    //     .attr("y", height + 6)
    //     .attr("dx", x({x: .45}))
    //     .attr("dy", ".71em")
    //     .attr("text-anchor", "middle")
    //     .text(function(d, i) { return i; });

    vis.append("line")
            .attr("x1", 0)
            .attr("x2", width - x({x:.1}))
            .attr("y1", height)
            .attr("y2", height);

    // function transitionGroup() {
    //   var group = d3.selectAll(parentElement);

    //   group.select("#group")
    //       .attr("class", "first active");

    //   group.select("#stack")
    //       .attr("class", "last");

    //   group.selectAll("g.layer rect")
    //     .transition()
    //       .duration(500)
    //       .delay(function(d, i) { return (i % m) * 10; })
    //       .attr("x", function(d, i) { return x({x: .9 * ~~(i / m) / n}); })
    //       .attr("width", x({x: .9 / n}))
    //       .each("end", transitionEnd);

    //   function transitionEnd() {
    //     d3.select(this)
    //       .transition()
    //       .duration(500)
    //       .attr("y", function(d) { return height - y2(d); })
    //       .attr("height", y2);
    //  }
}

function transitionStack()
{
    var stack = d3.select(parentElement);

    // stack.select("#group")
    //     .attr("class", "first");

    // stack.select("#stack")
    //     .attr("class", "last active");

    stack.selectAll("g.layer rect")
        //.transition()
        //.duration(500)
        //.delay(function(d, i) { return (i % m) * 10; })
            .attr("y", y1)
            .attr("height", function(d)
                  {
                      return y0(d) - y1(d);
                  });
    //.each("end", transitionEnd);

    // function transitionEnd() {
    //   d3.select(this)
    //     .transition()
    //       .duration(500)
    //       .attr("x", 0)
    //       .attr("width", x({x: .9}));
    // }
    // }
}
;

//   function stream_layers(n, m, o) {
//     if (arguments.length < 3) o = 0;
//     function bump(a) {
//       var x = 1 / (.1 + Math.random()),
//           y = 2 * Math.random() - .5,
//           z = 10 / (.1 + Math.random());
//       for (var i = 0; i < m; i++) {
//         var w = (i / m - y) * z;
//        a[i] += x * Math.exp(-w * w);
//      }
//    }
//    return d3.range(n).map(function() {
//        var a = [], i;
//       for (i = 0; i < m; i++) a[i] = o + o * Math.random();
//        for (i = 0; i < 5; i++) bump(a);
//        return a.map(stream_index);
//      });
// }

//  /* Another layer generator using gamma distributions. */
//  function stream_waves(n, m) {
//    return d3.range(n).map(function(i) {
//      return d3.range(m).map(function(j) {
//          var x = 20 * j / m - i / 3;
//          return 2 * x * Math.exp(-.5 * x);
//        }).map(stream_index);
//      });
//  }

//  function stream_index(d, i) {
//    return {x: i, y: Math.max(0, d)};
//  }

$(document).ready(function()
                  {
                      $.getJSON('./mtg/mtg/items.json', function(data)
                      {
                          var len = data.length;
                          var convertedManaCosts = [];
                          var manaCosts = [];

                          for(var i = 0; i < 6; i++)
                          {
                              var rtn = [];
                              for(var j = 0; j < len; j++)
                              {
                                  rtn.push({
                                               x:i, y:0, y0:0
                                           });
                              }
                              manaCosts.push(rtn);
                          }

                          for(var i = 0; i < len; i++)
                          {
                              var parsedNumber = parseInt(data[i]["convertedmana"], 10);
                              if(!isNaN(parsedNumber))
                              {
                                  convertedManaCosts.push(parsedNumber);
                              }

                              var mcost = data[i]["manacost"];
                              var len2 = mcost.length;
                              for(var j = 0; j < len2; j++)
                              {
                                  var rtn = 0;//[0,0,0,0,0,0];
                                  if(!isNaN(parseInt(mcost[j], 10)))
                                  {
                                      manaCosts[0][i].y = parseInt(mcost[j], 10);
                                  }
                                  else if(mcost[j] === "Green")
                                  {
                                      manaCosts[1][i].y++;
                                  }
                                  else if(mcost[j] === "White")
                                  {
                                      manaCosts[2][i].y++;
                                  }
                                  else if(mcost[j] === "Blue")
                                  {
                                      manaCosts[3][i].y++;
                                  }
                                  else if(mcost[j] === "Red")
                                  {
                                      manaCosts[4][i].y++;
                                  }
                                  else if(mcost[j] === "Black")
                                  {
                                      manaCosts[5][i].y++;
                                  }
                                  //manaCosts.push(rtn);
                              }
                          }

                          //displayConvertedManaDistribution("#placeholder2", convertedManaCosts);
                          //displayChart('#placeholder3', convertedManaCosts);

                          //displayStackedChart('#placeholder1', manaCosts);

                          function errorHandler(transaction, error)
                          {
                              if(error.code == 1)
                              {
                                  // DB Table already exists
                              }
                              else
                              {
                                  // Error is a human-readable string.
                                  console.log('Oops.  Error was ' + error.message + ' (Code ' + error.code + ')');
                              }
                              return false;
                          }

                          function dataSelectHandler(transaction, results)
                          {

                              // Handle the results
//                              for (var i=0; i<results.rows.length; i++) {
//
//                                  var row = results.rows.item(i);
//
//                                  var newFeature = new Object();
//
//                                  newFeature.fname   = row['fname'];
//                                  newFeature.bgcolor = row['bgcolor'];
//                                  newFeature.font    = row['font'];
//                                  newFeature.favcar  = row['favcar'];
//
//                                  $('body').css('background-color',newFeature.bgcolor);
//                                  $('body').css('font-family',newFeature.font);
//                                  $('#content').html('<h4 id="your_car">Your Favorite Car is a '+ newFeature.favcar +'</h4>');
//
//                                  if(newFeature.fname != 'none') {
//                                      $('#greeting').html('Howdy-ho, '+ newFeature.fname+'!');
//                                      $('#fname').val(newFeature.fname);
//                                  }
//
//                                  $('select#font_selection').find('option[value='+newFeature.font+']').attr('selected','selected');
//                                  $('select#bg_color').find('option[value='+newFeature.bgcolor+']').attr('selected','selected');
//                                  $('select#fav_car').find('option[value='+newFeature.favcar+']').attr('selected','selected');
//
//
//                              }

                          }

                          function nullDataHandler()
                          {
                              console.log("SQL Query Succeeded");
                          }

                          function createTables()
                          {
                              DEMODB.transaction(function(transaction)
                                                 {
                                                     transaction.executeSql('CREATE TABLE IF NOT EXISTS page_settings(id INTEGER NOT NULL PRIMARY KEY, fname TEXT NOT NULL,bgcolor TEXT NOT NULL, font TEXT, favcar TEXT);', [], nullDataHandler, errorHandler);
                                                 }
                              );
                              prePopulate();
                          }

                          function prePopulate()
                          {
                              DEMODB.transaction(function(transaction)
                                                 {
                                                     //Optional Starter Data when page is initialized
                                                     var data = ['1', 'none', '#B3B4EF', 'Helvetica', 'Porsche 911 GT3'];
                                                     transaction.executeSql("INSERT INTO page_settings(id, fname, bgcolor, font, favcar) VALUES (?, ?, ?, ?, ?)", [data[0], data[1], data[2], data[3], data[4]]);
                                                 }
                              );
                          }

                          function selectAll()
                          {
                              DEMODB.transaction(function(transaction)
                                                 {
                                                     transaction.executeSql("SELECT * FROM page_settings;", [], dataSelectHandler, errorHandler);
                                                 });
                          }

                          function initDatabase()
                          {
                              try
                              {
                                  if(!window.openDatabase)
                                  {
                                      alert('Databases are not supported in this browser.');
                                  }
                                  else
                                  {
                                      var shortName = 'DEMODB';
                                      var version = '1.0';
                                      var displayName = 'DEMO Database';
                                      var maxSize = 100000; //  bytes
                                      DEMODB = openDatabase(shortName, version, displayName, maxSize);
                                      createTables();
                                      selectAll();
                                  }
                              }
                              catch(e)
                              {
                                  if(e == 2)
                                  {
                                      // Version number mismatch.
                                      console.log("Invalid database version.");
                                  }
                                  else
                                  {
                                      console.log("Unknown error " + e + ".");
                                  }
                                  return;
                              }
                          }

                          initDatabase();

                      });
                  });
</script>
</body>
</html>